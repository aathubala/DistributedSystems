{"ast":null,"code":"import axios from 'axios';\nimport Swal from 'sweetalert2';\nexport const setNotification = () => async dispatch => {\n  dispatch({\n    type: 'USER_PUBLIC_NOTIFICATION_REQUEST'\n  });\n\n  try {\n    const response = await axios.get('https://hungrymeals-backend.onrender.com/api/notifications/getnotifications');\n    console.log(response); // localStorage.setItem('currentNotifications', JSON.stringify(response.data))\n\n    dispatch({\n      type: 'USER_PUBLIC_NOTIFICATION_SUCCESS',\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'USER_PUBLIC_NOTIFICATION_FAILED',\n      payload: error\n    });\n  }\n};\nexport const updateNotificationAction = updateNotification => async dispatch => {\n  dispatch({\n    type: 'UPDATE_PUBLIC_NOTIFICATION_REQUEST'\n  });\n\n  try {\n    const response = await axios.put('https://hungrymeals-backend.onrender.com/api/notifications/update/notification/63c378651e3467b26e947c1c', updateNotification);\n\n    if (updateNotification.notificationHeader === 'empty') {\n      const Toast = Swal.mixin({\n        toast: true,\n        position: 'top-end',\n        showConfirmButton: false,\n        timer: 1500,\n        timerProgressBar: true,\n        didOpen: toast => {\n          toast.addEventListener('mouseenter', Swal.stopTimer);\n          toast.addEventListener('mouseleave', Swal.resumeTimer);\n        }\n      });\n      Toast.fire({\n        icon: 'success',\n        title: 'Public notification remove successfully'\n      });\n      setTimeout(function () {\n        window.location.reload('/admin/notifications');\n      }, 1500);\n      console.log(response);\n      dispatch({\n        type: 'REMOVE_PUBLIC_NOTIFICATION_SUCCESS'\n      });\n    } else {\n      const Toast = Swal.mixin({\n        toast: true,\n        position: 'top-end',\n        showConfirmButton: false,\n        timer: 1500,\n        timerProgressBar: true,\n        didOpen: toast => {\n          toast.addEventListener('mouseenter', Swal.stopTimer);\n          toast.addEventListener('mouseleave', Swal.resumeTimer);\n        }\n      });\n      Toast.fire({\n        icon: 'success',\n        title: 'Public notification updated successfully'\n      });\n      setTimeout(function () {\n        window.location.reload('/admin/notifications');\n      }, 1500);\n      console.log(response);\n      dispatch({\n        type: 'UPDATE_PUBLIC_NOTIFICATION_SUCCESS'\n      });\n    }\n  } catch (error) {\n    const Toast = Swal.mixin({\n      toast: true,\n      position: 'top-end',\n      showConfirmButton: false,\n      timer: 1500,\n      timerProgressBar: true,\n      didOpen: toast => {\n        toast.addEventListener('mouseenter', Swal.stopTimer);\n        toast.addEventListener('mouseleave', Swal.resumeTimer);\n      }\n    });\n    Toast.fire({\n      icon: 'error',\n      title: 'Operation failed'\n    });\n    dispatch({\n      type: 'PUBLIC_NOTIFICATION_FAILED',\n      payload: error\n    });\n  }\n};","map":{"version":3,"names":["axios","Swal","setNotification","dispatch","type","response","get","console","log","payload","data","error","updateNotificationAction","updateNotification","put","notificationHeader","Toast","mixin","toast","position","showConfirmButton","timer","timerProgressBar","didOpen","addEventListener","stopTimer","resumeTimer","fire","icon","title","setTimeout","window","location","reload"],"sources":["C:/Users/ASUS/Documents/GitHub/Distributed System/DistributedSystems/Instructor-learnerService/frontend/src/actions/notificationAction.js"],"sourcesContent":["import axios from 'axios'\r\nimport Swal from 'sweetalert2'\r\n\r\nexport const setNotification = () => async dispatch => {\r\n\r\n    dispatch({ type: 'USER_PUBLIC_NOTIFICATION_REQUEST' })\r\n\r\n    try {\r\n        const response = await axios.get('https://hungrymeals-backend.onrender.com/api/notifications/getnotifications')\r\n        console.log(response);\r\n        // localStorage.setItem('currentNotifications', JSON.stringify(response.data))\r\n        dispatch({ type: 'USER_PUBLIC_NOTIFICATION_SUCCESS', payload: response.data })\r\n       \r\n\r\n    } catch (error) {\r\n        dispatch({ type: 'USER_PUBLIC_NOTIFICATION_FAILED' , payload: error })\r\n    }\r\n}\r\n\r\nexport const updateNotificationAction = (updateNotification) => async dispatch => {\r\n\r\n    dispatch({ type: 'UPDATE_PUBLIC_NOTIFICATION_REQUEST' })\r\n    \r\n\r\n    try {\r\n        const response = await axios.put('https://hungrymeals-backend.onrender.com/api/notifications/update/notification/63c378651e3467b26e947c1c', updateNotification)\r\n\r\n        if (updateNotification.notificationHeader === 'empty') {\r\n            const Toast = Swal.mixin({\r\n                toast: true,\r\n                position: 'top-end',\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                timerProgressBar: true,\r\n                didOpen: (toast) => {\r\n                    toast.addEventListener('mouseenter', Swal.stopTimer)\r\n                    toast.addEventListener('mouseleave', Swal.resumeTimer)\r\n                }\r\n            })\r\n    \r\n            Toast.fire({\r\n                icon: 'success',\r\n                title: 'Public notification remove successfully'\r\n            })\r\n            setTimeout(function () {\r\n                window.location.reload('/admin/notifications');\r\n            }, 1500);\r\n    \r\n            console.log(response);\r\n            dispatch({ type: 'REMOVE_PUBLIC_NOTIFICATION_SUCCESS' })\r\n        }else{\r\n            const Toast = Swal.mixin({\r\n                toast: true,\r\n                position: 'top-end',\r\n                showConfirmButton: false,\r\n                timer: 1500,\r\n                timerProgressBar: true,\r\n                didOpen: (toast) => {\r\n                    toast.addEventListener('mouseenter', Swal.stopTimer)\r\n                    toast.addEventListener('mouseleave', Swal.resumeTimer)\r\n                }\r\n            })\r\n    \r\n            Toast.fire({\r\n                icon: 'success',\r\n                title: 'Public notification updated successfully'\r\n            })\r\n            setTimeout(function () {\r\n                window.location.reload('/admin/notifications');\r\n            }, 1500);\r\n    \r\n            console.log(response);\r\n            dispatch({ type: 'UPDATE_PUBLIC_NOTIFICATION_SUCCESS' })\r\n        }\r\n\r\n\r\n\r\n    } catch (error) {\r\n        const Toast = Swal.mixin({\r\n            toast: true,\r\n            position: 'top-end',\r\n            showConfirmButton: false,\r\n            timer: 1500,\r\n            timerProgressBar: true,\r\n            didOpen: (toast) => {\r\n                toast.addEventListener('mouseenter', Swal.stopTimer)\r\n                toast.addEventListener('mouseleave', Swal.resumeTimer)\r\n            }\r\n        })\r\n\r\n        Toast.fire({\r\n            icon: 'error',\r\n            title: 'Operation failed'\r\n        })\r\n\r\n        dispatch({ type: 'PUBLIC_NOTIFICATION_FAILED', payload: error })\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}